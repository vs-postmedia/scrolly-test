{"version":3,"sources":["components/ArticleEntry/ArticleEntry.js","components/ArticleList/ArticleList.js","components/Scrollyteller/Scrollyteller.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ArticleEntry","props","data","react_default","a","createElement","className","data-index","id","text","ArticleList","ArticleEntries","map","d","i","components_ArticleEntry_ArticleEntry","key","Scrollyteller","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","stepValue","inherits","createClass","value","_this2","EnterView","selector","offset","enter","el","classList","add","index","getAttribute","updateGraphic","exit","Math","max","progress","once","console","log","setState","components_ArticleList_ArticleList","Component","App","components_Scrollyteller_Scrollyteller","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mYAYeA,EAVM,SAACC,GACrB,IAAMC,EAAOD,EAAMC,KAEnB,OACCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOC,aAAYL,EAAKM,IACrCL,EAAAC,EAAAC,cAAA,SAAIH,EAAKO,QCQGC,EAZK,SAACT,GACpB,OACCE,EAAAC,EAAAC,cAAA,UACEJ,EAAMU,eAAeC,IAAI,SAACC,EAAEC,GAC5B,OACCX,EAAAC,EAAAC,cAACU,EAAD,CAAcb,KAAMW,EAAGG,IAAKH,EAAEL,SCyDpBS,SA3Df,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACCQ,MAAQ,CACPC,UAAW,GAFbhB,EAAA,OAAAC,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAAC,GAAAG,OAAAiB,EAAA,EAAAjB,CAAAJ,EAAA,EAAAD,IAAA,oBAAAuB,MAAA,WAKqB,IAAAC,EAAAjB,KACnBkB,IAAU,CAETC,SAAU,QACVC,OAAQ,IACRC,MAAO,SAAAC,GACNA,EAAGC,UAAUC,IAAI,WACjB,IAAMC,EAAQH,EAAGI,aAAa,cAE9BT,EAAKU,cAAcL,EAAIG,IAGxBG,KAAM,SAAAN,GACL,IAAIG,EAAQH,EAAGI,aAAa,cAC5BD,EAAQI,KAAKC,IAAI,EAAGL,EAAQ,GAE5BR,EAAKU,cAAcL,EAAIG,IAGxBM,SAAU,SAAST,EAAIS,KAKvBC,MAAM,MA7BT,CAAAvC,IAAA,gBAAAuB,MAAA,SAiCeM,EAAIG,GACjBQ,QAAQC,IAAIT,EAAOH,GAEnBtB,KAAKmC,SAAS,CACbtB,UAAWY,MArCd,CAAAhC,IAAA,SAAAuB,MAAA,WA0CE,OACCpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACjBH,EAAAC,EAAAC,cAAA,UAAKkB,KAAKY,MAAMC,YAGjBjC,EAAAC,EAAAC,cAAA,eACCF,EAAAC,EAAAC,cAACsD,EAAD,CACChD,eAAgBY,KAAKtB,MAAMU,uBAlDjCM,EAAA,CAAmC2C,2BCWpBC,MAXf,WACC,OACG1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACyD,EAAD,CACCnD,eAAgBA,MCCFoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.88fc2107.chunk.js","sourcesContent":["import React from 'react';\n\nconst ArticleEntry = (props) => {\n\tconst data = props.data;\n\n\treturn (\n\t\t<li className='step' data-index={data.id}>\n\t\t\t<p>{data.text}</p>\n\t\t</li>\n\t);\n}\n\nexport default ArticleEntry;","import React from 'react';\nimport ArticleEntry from '../ArticleEntry/ArticleEntry'\n\nconst ArticleList = (props) => {\n\treturn (\n\t\t<ul>\n\t\t\t{props.ArticleEntries.map((d,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ArticleEntry data={d} key={d.id}></ArticleEntry>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ul>\n\t);\n}\n\nexport default ArticleList;\n","import React, { Component } from 'react';\nimport EnterView from 'enter-view';\nimport ArticleList from '../ArticleList/ArticleList';\n\nimport './Scrollyteller.css';\n\nexport class Scrollyteller extends Component {\n\tstate = {\n\t\tstepValue: 0\n\t};\n\n\tcomponentDidMount() {\n\t\tEnterView({\n\t\t\t// selector: stepSel.nodes(),\n\t\t\tselector: '.step',\n\t\t\toffset: 0.25,\n\t\t\tenter: el => {\n\t\t\t\tel.classList.add('entered');\n\t\t\t\tconst index = el.getAttribute('data-index');\n\t\t\t\t\n\t\t\t\tthis.updateGraphic(el, index);\n\t\t\t\t// console.log(`ENTER: ${index}`)\n\t\t\t},\n\t\t\texit: el => {\n\t\t\t\tlet index = el.getAttribute('data-index');\n\t\t\t\tindex = Math.max(0, index - 1);\n\t\t\t\t\n\t\t\t\tthis.updateGraphic(el, index);\n\t\t\t\t// console.log(`EXIT: ${index}`)\t\n\t\t\t},\n\t\t\tprogress: function(el, progress) {\n\t\t\t\t// el.style.opacity = progress;\n\t\t\t\t// let p = el.querySelector('.progress');\n  \t\t\t\t// p.innerText = progress.toFixed(2);\n\t\t\t},\n\t\t\tonce: false // trigger just once\n\t\t});\n\t}\n\n\tupdateGraphic(el, index) {\n\t\tconsole.log(index, el)\n\n\t\tthis.setState({\n\t\t\tstepValue: index\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='scrollyteller'>\n\t\t\t\t<figure className='sticky'>\n\t\t\t\t\t<h2>{this.state.stepValue}</h2>\n\t\t\t\t</figure>\n\n\t\t\t\t<article>\n\t\t\t\t\t<ArticleList\n\t\t\t\t\t\tArticleEntries={this.props.ArticleEntries}\n\t\t\t\t\t></ArticleList>\n\t\t\t\t</article>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Scrollyteller;","import React from 'react';\nimport Scrollyteller from '../Scrollyteller/Scrollyteller';\nimport ArticleEntries from '../../data/article-entries.json';\nimport './App.css';\n\n\nfunction App() {\n\treturn (\n\t  \t<div className=\"App\">\n\t  \t\t<h1>React template</h1>\n\t  \t\t<Scrollyteller\n\t  \t\t\tArticleEntries={ArticleEntries}\n\t  \t\t></Scrollyteller>\n\t  \t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport './css/index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}